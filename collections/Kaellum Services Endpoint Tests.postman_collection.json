{
	"info": {
		"_postman_id": "ed3e14c6-449e-4670-b7d0-7a32a53007eb",
		"name": "Kaellum Services Endpoint Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21183454"
	},
	"item": [
		{
			"name": "Client",
			"item": [
				{
					"name": "Kaellum Signup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomPassword(len = 8, minUpper = 0, minLower = 0, minNumber = -1, minSpecial = -1) {\r",
									"    let specChars = \"!@#$&*\"; \r",
									"        chars = specChars[Math.floor(Math.random() * specChars.length)]; \r",
									"    //String.fromCharCode(...Array(127).keys()).slice(33),//chars\r",
									"        A2Z = String.fromCharCode(...Array(91).keys()).slice(65),//A-Z\r",
									"        a2z = String.fromCharCode(...Array(123).keys()).slice(97),//a-z\r",
									"        zero2nine = String.fromCharCode(...Array(58).keys()).slice(48),//0-9\r",
									"        specials = chars.replace(/\\w/g, '')\r",
									"    if (minSpecial < 0) chars = zero2nine + A2Z + a2z\r",
									"    if (minNumber < 0) chars = chars.replace(zero2nine, '')\r",
									"    let minRequired = minSpecial + minUpper + minLower + minNumber\r",
									"    let rs = [].concat(\r",
									"        Array.from({length: minSpecial ? minSpecial : 0}, () => specials[Math.floor(Math.random() * specials.length)]),\r",
									"        Array.from({length: minUpper ? minUpper : 0}, () => A2Z[Math.floor(Math.random() * A2Z.length)]),\r",
									"        Array.from({length: minLower ? minLower : 0}, () => a2z[Math.floor(Math.random() * a2z.length)]),\r",
									"        Array.from({length: minNumber ? minNumber : 0}, () => zero2nine[Math.floor(Math.random() * zero2nine.length)]),\r",
									"        Array.from({length: Math.max(len, minRequired) - (minRequired ? minRequired : 0)}, () => chars[Math.floor(Math.random() * chars.length)]),\r",
									"    )\r",
									"    return rs.sort(() => Math.random() > Math.random()).join('')\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"password\", randomPassword(8, 2, 3, 2, 0));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Save response body variables to collections variables\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.expect(json.id).not.to.equal(null);\r",
									"    pm.collectionVariables.set(\"id\", json.id);\r",
									"    pm.collectionVariables.set(\"firstname\", json.firstName);\r",
									"    pm.collectionVariables.set(\"lastname\", json.lastName);\r",
									"    pm.collectionVariables.set(\"email\", json.email);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "marcusgeh",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "0123xxx",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJSYXBoYWVsIiwicm9sZXMiOlsiUk9MRV9DTElFTlQiXSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS9hdXRoL2xvZ2luIiwiZXhwIjoxNjU3MjU4ODY2fQ.rm8qXh0B1RJ1RKKweLvHu91m3czDRNV0KL1SYiqK_V4",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\" : \"{{$randomFirstName}}\",\r\n    \"lastName\" : \"{{$randomLastName}}\", \r\n    \"email\" : \"{{$randomEmail}}\",\r\n    \"password\" : \"{{password}}\",\r\n    \"role\" : \"ROLE_CLIENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user/signup",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Activation",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user/activation/{{email}}/{userTempCode}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"activation",
								"{{email}}",
								"{userTempCode}"
							]
						},
						"description": "# **ATTENTION**\n\nIn order to run this request you will need to grab the activation code from the Mongo document 'User', field 'userTempCode' and feed the environment variable 'userTempCode'  \n  \nThis however won't be necessary case you already activated this user through the Activation Email."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();\r",
									"pm.test(\"Save response body variables to collections variables\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"access_token\", json.access_token);\r",
									"    pm.collectionVariables.set(\"refresh_token\", json.refresh_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "marcusgeh",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "0123xxx",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:8080/api/auth/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"newpassword\", Math.random().toString(36).slice(2, 10));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();\r",
									"pm.test(\"Save response body variables to collections variables\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"password\", pm.collectionVariables.get(\"newpassword\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "username",
								"value": "marcusgeh",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "0123xxx",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"currentPassword\": \"{{password}}\", \r\n    \"newPassword\": \"{{newpassword}}\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user/update-password?userId={{id}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"update-password"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deactivate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// if(pm.environment.get(\"password\") != \"abc123\"){\r",
									"//     console.log(\"entou\");\r",
									"\r",
									"\r",
									"// const login={\r",
									"//         method : 'POST',\r",
									"//         url : 'localhost:8080/api/auth/login',\r",
									"//         header: {\r",
									"//             'Content-Type':'pplication/x-www-form-urlencoded',\r",
									"//             'Accept-Language':'en'\r",
									"//         },\r",
									"//         body:{\r",
									"//             mode : 'application/json',\r",
									"//             raw: JSON.stringify(\r",
									"//                 'username'\r",
									"//                 )\r",
									"//         }\r",
									"//     };   \r",
									"\r",
									"// const updatePassReq={\r",
									"//         method : 'PUT',\r",
									"//         url : 'localhost:8080/api/user/update-password?userId='+pm.collectionVariables.get(\"id\"),\r",
									"//         header: {\r",
									"//             'Content-Type':'application/json',\r",
									"//             'Accept-Language':'en',\r",
									"//             'x-auth-token':pm.environment.get('x-auth-token')\r",
									"//         },\r",
									"//         body:{\r",
									"//             mode : 'application/json',\r",
									"//             raw: JSON.stringify(\r",
									"//                 {\r",
									"//                     \"currentPassword\": \"bcd234\", \r",
									"//                     \"newPassword\": \"abc123\" \r",
									"//                 })\r",
									"//         }\r",
									"//     };   \r",
									"\r",
									"\r",
									"//     pm.sendRequest(updatePassReq, function (err, res1) {\r",
									"//         pm.expect(res1).to.have.property('code', 200);\r",
									"//             pm.environment.set(\"password\", \"abc123\");\r",
									"//      });\r",
									"// }\r",
									"\r",
									"    "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();\r",
									"pm.test(\"Save response body variables to collections variables\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "username",
								"value": "marcusgeh",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "0123xxx",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user/deactivate?userId={{id}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"deactivate"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user/forgot-password/{{email}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"forgot-password",
								"{{email}}"
							]
						},
						"description": "# **ATTENTION**\n\nIn order to run this request you will need to grab the activation code from the Mongo document 'User', field 'userTempCode' and feed the environment variable 'userTempCode'  \n  \nThis however won't be necessary case you already activated this user through the Activation Email."
					},
					"response": []
				},
				{
					"name": "Password Reset",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user/{forgot-password}/reset-password",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"{forgot-password}",
								"reset-password"
							]
						},
						"description": "# **ATTENTION**\n\nIn order to run this request you will need to grab the activation code from the Mongo document 'User', field 'userTempCode' and feed the environment variable 'userTempCode'  \n  \nThis however won't be necessary case you already activated this user through the Activation Email."
					},
					"response": []
				}
			]
		},
		{
			"name": "Provider",
			"item": [
				{
					"name": "Kaellum Signup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function randomPassword(len = 8, minUpper = 0, minLower = 0, minNumber = -1, minSpecial = -1) {\r",
									"    let specChars = \"!@#$&*\"; \r",
									"        chars = specChars[Math.floor(Math.random() * specChars.length)]; \r",
									"    //String.fromCharCode(...Array(127).keys()).slice(33),//chars\r",
									"        A2Z = String.fromCharCode(...Array(91).keys()).slice(65),//A-Z\r",
									"        a2z = String.fromCharCode(...Array(123).keys()).slice(97),//a-z\r",
									"        zero2nine = String.fromCharCode(...Array(58).keys()).slice(48),//0-9\r",
									"        specials = chars.replace(/\\w/g, '')\r",
									"    if (minSpecial < 0) chars = zero2nine + A2Z + a2z\r",
									"    if (minNumber < 0) chars = chars.replace(zero2nine, '')\r",
									"    let minRequired = minSpecial + minUpper + minLower + minNumber\r",
									"    let rs = [].concat(\r",
									"        Array.from({length: minSpecial ? minSpecial : 0}, () => specials[Math.floor(Math.random() * specials.length)]),\r",
									"        Array.from({length: minUpper ? minUpper : 0}, () => A2Z[Math.floor(Math.random() * A2Z.length)]),\r",
									"        Array.from({length: minLower ? minLower : 0}, () => a2z[Math.floor(Math.random() * a2z.length)]),\r",
									"        Array.from({length: minNumber ? minNumber : 0}, () => zero2nine[Math.floor(Math.random() * zero2nine.length)]),\r",
									"        Array.from({length: Math.max(len, minRequired) - (minRequired ? minRequired : 0)}, () => chars[Math.floor(Math.random() * chars.length)]),\r",
									"    )\r",
									"    return rs.sort(() => Math.random() > Math.random()).join('')\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"password\", randomPassword(8, 2, 3, 2, 0));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const parseJwt = (token) => {\r",
									"  try {\r",
									"      console.log(JSON.parse(atob(token.split('.')[1])));\r",
									"      const jsonUser = JSON.parse(atob(token.split('.')[1]));\r",
									"      pm.collectionVariables.set(\"username\", jsonUser.sub);\r",
									"      pm.collectionVariables.set(\"firstname\", jsonUser.firstName);\r",
									"      pm.collectionVariables.set(\"lastname\", jsonUser.lastName); \r",
									"      pm.collectionVariables.set(\"id\", jsonUser.id); \r",
									"    return JSON.parse(atob(token.split('.')[1]));\r",
									"  } catch (e) {\r",
									"    return null;\r",
									"  }\r",
									"};\r",
									"\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Save response body variables to collections variables\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.expect(json.id).not.to.equal(null);\r",
									"    pm.collectionVariables.set(\"access_token\", json.access_token);\r",
									"    pm.collectionVariables.set(\"refresh_token\", json.refresh_token);\r",
									"    parseJwt(json.access_token);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "marcusgeh",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "0123xxx",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJDcnlzdGFsX0FybXN0cm9uZ0B5YWhvby5jb20iLCJmaXJzdE5hbWUiOiJBbHZpcyIsImxhc3ROYW1lIjoiTGVncm9zIiwiaXNWZXJpZmllZCI6dHJ1ZSwicm9sZXMiOlsiUk9MRV9QUk9WSURFUiJdLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL2F1dGgvbG9naW4iLCJpZCI6IjYzMDFiZTc3YTQyMjhhMDc0YmY4YjgzMSIsImV4cCI6MTY2MTA2MjI5OH0.tUmTiZ1ycqMNOvgwjBk8R5sk0nXFJvjBP_VNCVdGGj4",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"{{$randomEmail}}\",\r\n    \"password\" : \"{{password}}\",\r\n    \"profile\" : {\r\n        \"firstName\" : \"{{$randomFirstName}}\",\r\n        \"lastName\" : \"{{$randomLastName}}\",\r\n        \"role\" : \"ROLE_PROVIDER\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user/signup",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Provider",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Save response body variables to collections variables\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(json.id).not.to.equal(null);\r",
									"    pm.collectionVariables.set(\"id\", json.id);\r",
									"    pm.collectionVariables.set(\"firstname\", json.firstName);\r",
									"    pm.collectionVariables.set(\"lastname\", json.lastName);\r",
									"    pm.collectionVariables.set(\"email\", json.email);\r",
									"    pm.collectionVariables.set(\"profileid\", json.profile.id);\r",
									"    pm.collectionVariables.set(\"city\", json.profile.addresses[0].city);\r",
									"    pm.collectionVariables.set(\"province\", json.profile.addresses[0].province);\r",
									"    pm.collectionVariables.set(\"latitude\", json.profile.addresses[0].latitude);\r",
									"    pm.collectionVariables.set(\"longitude\", json.profile.addresses[0].longitude);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "username",
								"value": "marcusgeh",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "0123xxx",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"email\": \"{{username}}\",\r\n    \"profile\":  \r\n    {    \r\n        \"firstName\": \"{{firstname}}\" ,\r\n        \"lastName\": \"{{lastname}}\",\r\n        \"dob\" : \"2022-04-01\",\r\n        \"phone\": \"{{$randomPhoneNumber}}\",\r\n        \"price\" : \"{{$randomPrice}}\",\r\n        \"hours\" : [2],\r\n        \"days\" : [2,3],\r\n        \"addresses\" : [\r\n            {\r\n                \"street\": \"{{$randomStreetName}}\",\r\n                \"street2\": \"{{$randomStreetName}}\",\r\n                \"city\": \"{{$randomCity}}\",\r\n                \"province\": \"{{$randomLocale}}\",\r\n                \"country\": \"{{$randomCountry}}\",\r\n                \"postalCode\": \"{{$randomDomainSuffix}}\",\r\n                \"latitude\" : \"{{$randomLatitude}}\",\r\n                \"longitude\" : \"{{$randomLongitude}}\"\r\n            },\r\n            {\r\n                \"street\": \"{{$randomStreetName}}\",\r\n                \"street2\": \"{{$randomStreetName}}\",\r\n                \"city\": \"{{$randomCity}}\",\r\n                \"province\": \"{{$randomLocale}}\",\r\n                \"country\": \"{{$randomCountry}}\",\r\n                \"postalCode\": \"{{$randomDomainSuffix}}\",\r\n                \"latitude\" : \"{{$randomLatitude}}\",\r\n                \"longitude\" : \"{{$randomLongitude}}\"\r\n            }\r\n        ],\r\n        \"role\": \"ROLE_PROVIDER\"        \r\n    }\r\n}    ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user/update",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Providers",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "localhost:8080/api/user/provider",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"provider"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Provider by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Tests Provider by ID + gets data for Advance Search test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"city\", json.profile.addresses[0].city);\r",
									"    pm.collectionVariables.set(\"province\", json.profile.addresses[0].province);\r",
									"    pm.collectionVariables.set(\"latitude\", json.profile.addresses[0].latitude);\r",
									"    pm.collectionVariables.set(\"longitude\", json.profile.addresses[0].longitude);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/api/user/{{id}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Advanced Search (without coordinates)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/api/user/provider?page=0&size=10&city={{city}}&province={{province}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"provider"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "lastName",
									"value": "{lname}",
									"disabled": true
								},
								{
									"key": "city",
									"value": "{{city}}"
								},
								{
									"key": "province",
									"value": "{{province}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Advanced Search (with coordinates & city & simple)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/api/user/provider?city={{city}}&page=0&size=10&minLat={{latitude}}&maxLat={{latitude}}&minLng={{longitude}}&maxLng={{longitude}}&isSimple=true",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"provider"
							],
							"query": [
								{
									"key": "city",
									"value": "{{city}}"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "minLat",
									"value": "{{latitude}}"
								},
								{
									"key": "maxLat",
									"value": "{{latitude}}"
								},
								{
									"key": "minLng",
									"value": "{{longitude}}"
								},
								{
									"key": "maxLng",
									"value": "{{longitude}}"
								},
								{
									"key": "isSimple",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Advanced Search (with coordinates & city & full) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/api/user/provider?city={{city}}&page=0&size=10&minLat={{latitude}}&maxLat={{latitude}}&minLng={{longitude}}&maxLng={{longitude}}&isSimple=true",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user",
								"provider"
							],
							"query": [
								{
									"key": "city",
									"value": "{{city}}"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								},
								{
									"key": "minLat",
									"value": "{{latitude}}"
								},
								{
									"key": "maxLat",
									"value": "{{latitude}}"
								},
								{
									"key": "minLng",
									"value": "{{longitude}}"
								},
								{
									"key": "maxLng",
									"value": "{{longitude}}"
								},
								{
									"key": "isSimple",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json = pm.response.json();\r",
									"pm.test(\"Save response body variables to collections variables\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.collectionVariables.set(\"accesstokenprovider\", json.access_token);\r",
									"    pm.collectionVariables.set(\"refreshtoken\", json.refresh_token);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "marcusgeh",
								"type": "text",
								"disabled": true
							},
							{
								"key": "password",
								"value": "0123xxx",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:8080/api/auth/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "firstname",
			"value": ""
		},
		{
			"key": "lastname",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "profileid",
			"value": ""
		},
		{
			"key": "accesstokenprovider",
			"value": ""
		},
		{
			"key": "refreshtoken",
			"value": ""
		},
		{
			"key": "newpassword",
			"value": ""
		},
		{
			"key": "usrername",
			"value": ""
		},
		{
			"key": "city",
			"value": ""
		},
		{
			"key": "province",
			"value": ""
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "latitude",
			"value": ""
		},
		{
			"key": "longitude",
			"value": ""
		}
	]
}